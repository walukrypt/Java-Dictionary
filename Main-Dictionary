*****************************************************************************************************************************

abstract:
	(keyword)

*****************************************************************************************************************************

argument:

*****************************************************************************************************************************

assert:
	(keyword)

*****************************************************************************************************************************

BigInteger:

*****************************************************************************************************************************

BigDecimal:

*****************************************************************************************************************************

boolean:
	(keyword, data type)
boolean is one of eight primitive data types in Java. The boolean data type has only two possible values: true and false (null is not a boolean value).

*****************************************************************************************************************************

break:
	(keyword)
The keyword 'break' is used to terminate the nearest loop. Once the compiler encounters a break keyword, it terminates the nearest loop immediately. 'break' is also used to jump out of (break out of) switch statements.

	Example:
		for(int i = 0; i < 10; i++){
			if(i == 2){
				break;
				}

			System.out.println("Hey");
			}


If we run the example above, 'Hey' will be printed just twice (despite the fact that the for loop is set to loop 10 times) because the loop breaks when i is 2.

*****************************************************************************************************************************

byte:
	(keyword, data type)

*****************************************************************************************************************************

case:
	(keyword)

*****************************************************************************************************************************

catch:
	(keyword)

*****************************************************************************************************************************

char:
	(keyword, data type)

*****************************************************************************************************************************

class:
	(keyword)
A class is a blueprint of an object and it might contain one or more methods.

*****************************************************************************************************************************

const:
	(keyword)

*****************************************************************************************************************************

Compile:

*****************************************************************************************************************************

continue:
	(keyword)
The keyword 'continue' is used to skip the remaining part of a loop iteration and jump to the next iteration.

	Example:
		for(int i = 0; i < 3; i++){
			if(i == 1){
			continue;
			}

			System.out.println("Hey");
			}
	
If we run the code snippet above, 'Hey' will be printed out just twice. During the second iteration (when i is 1), nothing happens, this iteration is skipped because of the 'continue' keyword.

*****************************************************************************************************************************

default:
	(keyword)

*****************************************************************************************************************************

do:
	(keyword)

*****************************************************************************************************************************

do-while:

*****************************************************************************************************************************

double:
	(keyword, data type)

*****************************************************************************************************************************

else if:
	
*****************************************************************************************************************************

else:
	(keyword)

*****************************************************************************************************************************

enum:
	(keyword)
*****************************************************************************************************************************

Error:

*****************************************************************************************************************************

Exception:
	(Exception class)

*****************************************************************************************************************************

extends:
	(keyword)
The keyword 'extends' is used in class declarations to state that a class is a subclass (child) of another class and would therefore reuse some of its functionalities.
	
	EXAMPLE
		public class Earth extends Planet{
	
			}

*****************************************************************************************************************************

false:
	(keyword, boolean value)

*****************************************************************************************************************************

final:
	(keyword)

*****************************************************************************************************************************

finally:
	(keyword)

*****************************************************************************************************************************

float:
	(keyword, data type)

*****************************************************************************************************************************

for:
	(keyword)

*****************************************************************************************************************************

foreach:
	(keyword)

*****************************************************************************************************************************

goto:
	(keyword)

*****************************************************************************************************************************

if:
	(keyword)
The keyword 'if' is used to start the declaration of an 'if statement'. The content of an if statement is executed if and only if its condition is satisfied.

	EXAMPLE:
		int x = 3;
		if(x == 3){
			System.out.println("x is 3");
			}

The if statement in the code snippet above is executed because the condition (x == 3) is satisfied (true). If x was 4, nothing would be printed out because the condition won't be satisfied, the entire if statement would therefore be skipped.

*****************************************************************************************************************************

implements:
	(keyword)

*****************************************************************************************************************************

import:
	(keyword)

*****************************************************************************************************************************

Inheritance:

*****************************************************************************************************************************

instanceof:
	(keyword)

*****************************************************************************************************************************

int:
	(keyword, data type)

*****************************************************************************************************************************

interface:
	(keyword)

*****************************************************************************************************************************

Iteration:

*****************************************************************************************************************************

IOException:
	(Exception class)

*****************************************************************************************************************************
Java:

*****************************************************************************************************************************

javac:
	(command)
javac is the command used to compile a java program. If a well-written Java code exists with the name Mama.java, running the command: javac Mama.java will compile the java code and store it as Mama.class.

*****************************************************************************************************************************

Label:

*****************************************************************************************************************************

long:
	(keyword, data type)

*****************************************************************************************************************************

main:
	(keyword)

*****************************************************************************************************************************

Method:

*****************************************************************************************************************************

Method Overloading:

*****************************************************************************************************************************

native:
	(keyword)

*****************************************************************************************************************************

new:
	(keyword)
The keyword 'new' is used when creating an object of an existing class. It is also used when creating arrays.
	
	EXAMPLE
		String name = new String("Homer Simpson");
		Scanner in = new Scanner(System.in);
		Apples a = new Apples();

*****************************************************************************************************************************

null:

*****************************************************************************************************************************

NullPointerException:
	(Exception class)

*****************************************************************************************************************************

Object:
	(keyword)

*****************************************************************************************************************************

package:
	(keyword)
A package is a collection of classes and other logically related definitions. Although optional, the package name should be declared in the first line of a class (before anything else).

	EXAMPLE
	package Examinations
	import java.util.*;
	public class Mathematics{
	
		}

*****************************************************************************************************************************

package-private:
	(Access-Modifier)

*****************************************************************************************************************************

Parameter:

*****************************************************************************************************************************
Polymorphism:

*****************************************************************************************************************************

print:
	(method)

*****************************************************************************************************************************

printf:
	(method)

*****************************************************************************************************************************

private:
	(keyword, Access-modifier)

*****************************************************************************************************************************

protected:
	(keyword, Access-modifier)

*****************************************************************************************************************************

println:
	(method)

*****************************************************************************************************************************

public:
	(Access-modifier, keyword)

*****************************************************************************************************************************

return:
	(keyword)
The keyword 'return' is used to terminate a method and probably return (produce) a value. This returned value can be of any primitive or object reference type. All methods either return a value (primitive or reference) or void (nothing).

	Example
	public int add(int a, int b){
		int sum = a + b;
		return sum;
			}

*****************************************************************************************************************************

short:
	(keyword, data type)

*****************************************************************************************************************************

static:
	(keyword, modifier)

*****************************************************************************************************************************

strictfp:
	(keyword)

*****************************************************************************************************************************

String:
	(keyword, data type)

*****************************************************************************************************************************

StringBuffer:
	(class)

*****************************************************************************************************************************

String-Builder:
	(class)

*****************************************************************************************************************************

super:
	(keyword)
The keyword 'super' is used by subclasses to access methods declared in a superclass. The keyword is also used to invoke the constructor of a super class.

	EXAMPLE
	public int getAmount(){
		return super.getPayment();
		}

The method above indicates that the superclass contains a method called getPayment() and the value of that method is being accessed by the getAmount() method (in the subclass).

*****************************************************************************************************************************

switch:
	(keyword)

*****************************************************************************************************************************

synchronized:
	(keyword)

*****************************************************************************************************************************

System:
	(keyword, class)

*****************************************************************************************************************************

this:
	(keyword)
The keyword 'this' is basically a self-reference keyword. Any variable or method preceeded by the keyword 'this' belongs to the current object reference.

	EXAMPLE
	public class Complicated{
		String name;
		int age;
	public Complicated(String name, int age){
		this.name = name;
		this.age = age;
			}
		}

In the example above, "this.name" refers to the name variable that was declared as a global variable (property of the class).

*****************************************************************************************************************************

throw:
	(keyword)

*****************************************************************************************************************************

throws:
	(keyword)

*****************************************************************************************************************************

transient:
	(keyword)

*****************************************************************************************************************************

true:
	(keyword, boolean value)

*****************************************************************************************************************************
try:
	(keyword)

*****************************************************************************************************************************

void:
	(keyword)
void is a keyword used to specify that a method doesn't return any value. By default, the main method always returns void.

	EXAMPLE
		public void incrementByOne(int a){
			a++;
			}

*****************************************************************************************************************************

volatile:
	(keyword)

*****************************************************************************************************************************

while
	(keyword)
A while loop repeats instructions over and over again as long as a particular condition is met. A while loop is often preceeded by the keyword 'while' followed by a condition (in parenthesis) and then a body of instruction(s); as long as the condition is met, the instructions will always be executed.
	
	Example:
		while(x >= 2){
			Systm.out.println("x is greater than or equal to 2");
			}
*****************************************************************************************************************************
