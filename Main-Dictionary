*****************************************************************************************************************************

abstract:
	(keyword)

*****************************************************************************************************************************

argument:

*****************************************************************************************************************************

assert:
	(keyword)

*****************************************************************************************************************************

boolean:
	(keyword, data type)
boolean is one of eight primitive data types in Java. The boolean data type has only two possible values: true and false (null is not a boolean value).

*****************************************************************************************************************************

break:
	(keyword)
The keyword 'break' is used to terminate the nearest loop. Once the compiler encounters a break keyword, it terminates the nearest loop immediately. 'break' is also used to jump out of (break out of) switch statements.

	Example:
		for(int i = 0; i < 10; i++){
			if(i == 2){
				break;
				}

			System.out.println("Hey");
			}


If we run the example above, 'Hey' will be printed just twice (despite the fact that the for loop is set to loop 10 times) because the loop breaks when i is 2.

*****************************************************************************************************************************

Bug:
A bug is also known as an error and it represents anything that brings undesired results or causes a program to terminate.

*****************************************************************************************************************************

byte:
	(keyword, data type)
byte is one of eight data types in Java and it indicates an 8-bit whole number. Values of type 'byte' cannot contain a decimal point. The wrapper class for the type 'byte' is Byte.

*****************************************************************************************************************************

case:
	(keyword)
case is a keyword used in switch statements. A case represents an option or a path through which execution can flow. Usually, the argument of the switch statement is usually compared with each case and the first one that matches is executed.

EXAMPLE
	int a = 2;
	switch(a){
		case 1:
			System.out.println("a is 1");
			break;
		case 2:
			System.out.println("a is 2");
			break;
		case 3:
			System.out.println("a is 3");
			break;
			break;
		}//end of switch-case statement

In the example above, case 2 is executed because it matches the argument.

*****************************************************************************************************************************

catch:
	(keyword)
A catch statement immediately follows a try statement. There can be multiple catch statements after a catch block each containing instructions for handling different types of exceptions. If an exception is thrown within a try block, it is compared to any of the catch statements. If it matches, the exception will be executed.

Example
	try{
		int a = 10;
		int b = 0;
		int quotient = a/b;
		}
	catch(ArithmeticException a){
		System.out.println("Cannot perform this operation");
		}



It is impossible to divide by zero in Java; therefore, ordinarily, the code above should flag an error. However, this has been taken care of by the try and catch block. When the 'a/b' part is about to be executed, an Arithmetic Exception is thrown and the JVM checks for a catch statement that can handle this type of exception.

*****************************************************************************************************************************

char:
	(keyword, data type)
int is one of eight data types in Java and it indicates a character (a single letter, digit or a symbol). The wrapper class for the type char is Character. When declaring a variable of type char, the value must be surrounded by single quotes.\ne.g\tchar a = 'w';

*****************************************************************************************************************************

class:
	(keyword)
A class is a blueprint of an object and it might contain one or more methods.

*****************************************************************************************************************************

const:
	(keyword)
This keyword doesn't actually have any meaning in Java. But it's still a reserved keyword anyway.

*****************************************************************************************************************************

Compile:
Compilation is the first stage in processing a Java program after saving. Suppose we have a Java program called Deborah.java . Compiling it would change the name to Deborah.class and it'd be saved in a format called a bytecode. The role of the JVM is to convert bytecodes to executable instructions that the computer can process directly.

*****************************************************************************************************************************

continue:
	(keyword)
The keyword 'continue' is used to skip the remaining part of a loop iteration and jump to the next iteration.

	Example:
		for(int i = 0; i < 3; i++){
			if(i == 1){
			continue;
			}

			System.out.println("Hey");
			}
	
If we run the code snippet above, 'Hey' will be printed out just twice. During the second iteration (when i is 1), nothing happens, this iteration is skipped because of the 'continue' keyword.

*****************************************************************************************************************************

default:
	(keyword)
The default keyword is used in switch statements as a last resort just in case none of the switch statements match the argument of the switch statement.

EXAMPLE
	int a = 6;
	switch(a){
		case 1:
			System.out.println("a is 1");
			break;
		case 2:
			System.out.println("a is 2");
			break;
		case 3:
			System.out.println("a is 3");
			break;
		default:
			System.out.println("a is not within the range");
			break;
		}//end of switch-case statement


In the example above, the default statement is executed because none of the cases match the argument of the switch statement.

*****************************************************************************************************************************

do:
	(keyword)
The keyword 'do' starts a do-while loop. The do-while loop is functionally similar to a while loop except that the condition in the while statement is usually evaluated after the instructions are executed.

EXAMPLE:
	int x = 2;
	do{
		Systemout.println("Taslim Oseni");
		}
	while(x < 4);

*****************************************************************************************************************************

double:
	(keyword, data type)
double is one of eight data types in Java and it indicates a 64-bit number. Values of type 'double' are floating-point numbers and hence, can contain a decimal point. The wrapper class for the type 'double' is Double.
*****************************************************************************************************************************

else if:
An else if statement is an optional extension of an 'if statement' and it creates alternative flows just in case the condition of the 'if statement' or previous 'else if' statements are not met. There can be multiple consecutive 'else if' statements. else if statements bear arguments.

EXAMPLE:
	int x = 2;
		if(x == 1){
			System.out.println("x is 1");
			}
		else if(x == 2){
			System.out.println("x is 2");
			}
		else if(x == 3){
			System.out.println("x is 3");
			}
		else{
			System.out.println("x is not in range");
			}
	
*****************************************************************************************************************************

else:
	(keyword)
An else statement is an optional extension of an 'if statement' and it provides an alternate flow just in case the condition of the if statement isn't met. An else statement cannot have an argument and it either comes after an 'if statement' or an 'else-if' statement and it represents the final part of an if-block.

EXAMPLE:
	int x = 4;
		if(x == 3){
			System.out.println("x is 3");
			}
		else{
			System.out.println("do nothing");


In the example above, the instructions in the else statement are executed because the condition of the if statement isn't met.

*****************************************************************************************************************************

enum:
	(keyword)
An enum stands for enumeration and it is used to create a newly defined type (i.e a bunch of values that a variable can have). Enums can have parameters and can be passed into methods.
*****************************************************************************************************************************

Error:
Anything that causes a program to terminate or bring undesired results is an error.

*****************************************************************************************************************************

Exception:
	(Exception class)

*****************************************************************************************************************************

extends:
	(keyword)
The keyword 'extends' is used in class declarations to state that a class is a subclass (child) of another class and would therefore reuse some of its functionalities.
	
	EXAMPLE
		public class Earth extends Planet{
	
			}

*****************************************************************************************************************************

false:
	(keyword, boolean value)
false is one of the only two possible boolean values. Also, false could also indicate that a particular condition is NOT met.

EXAMPLE
	boolean bool = ((2 + 2) == 4);

The variable bool above is true because 2 + 2 is 4.

*****************************************************************************************************************************

final:
	(keyword)

*****************************************************************************************************************************

finally:
	(keyword)
A finally block (optionally) comes after a try and catch block. The contents of a finally statement are always executed no matter what.

*****************************************************************************************************************************

float:
	(keyword, data type)
float is one of eight data types in Java and it indicates a 32-bit number. Values of type 'float' are floating-point numbers and hence, can contain a decimal point. The wrapper class for the type 'float' is Float.

*****************************************************************************************************************************

for:
	(keyword)
A for loop repeatedly executes a set of instructions as long as certain conditions are met.

EXAMPLE:
	for(int i = 1; i <= 3; i++){
		System.out.println(i);
		}

The for loop above has three parameters; the first one (int i = 0) represents the declaration of the counter variable. The counter variable is very necessary; it helps to keep track of the number of iterations so far. The second parameter (i < 3) describes the boundary of the loop. The loop will always be repeated as long as this condition is met (i.e as long as i is less than or equal to 3). The final parameter of the for loop (i++) indicates direction. In our example, it means after each iteration, i increases by 1.
If we run our code snippet, we have:
	1
	2
	2 


*****************************************************************************************************************************

foreach:
	(keyword)

*****************************************************************************************************************************

goto:
	(keyword)
This keyword doesn't actually have any meaning in Java. But it's still a reserved keyword anyway.

*****************************************************************************************************************************

if:
	(keyword)
The if statement in Java is a type of selective statement. The content of an if statement is executed if and only if its condition is satisfied. An if statement MIGHT be followed by an 'else if' or 'else' statement.

	EXAMPLE:
		int x = 3;
		if(x == 3){
			System.out.println("x is 3");
			}
		else{
			System.out.println("do nothing");


The if statement in the code snippet above is executed because the condition (x == 3) is satisfied (true). If x was 4, nothing would be printed out because the condition won't be satisfied, the entire if statement would therefore be skipped.

*****************************************************************************************************************************

implements:
	(keyword)

*****************************************************************************************************************************

import:
	(keyword)
An import statement is used to introduce other classes or packages into a class. If we import a particular class, all the class's methods become available and accessible.

EXAMPLE
	import java.util.Scanner;

The import statement above makes available the Scanner class. After importing, we can create an object of the class and use the class's methods.
We can import all the classes under a package at once by using the '*' character:

	import java.util.*;

*****************************************************************************************************************************

Inheritance:

*****************************************************************************************************************************

instanceof:
	(keyword)

*****************************************************************************************************************************

int:
	(keyword, data type)
int is one of eight data types in Java and it indicates a 32-bit whole number. Values of type 'int' cannot contain a decimal point. The wrapper class for the type 'int' is Integer.

*****************************************************************************************************************************

interface:
	(keyword)

*****************************************************************************************************************************

Iteration:

*****************************************************************************************************************************
Java:

*****************************************************************************************************************************

javac:
	(command)
javac is the command used to compile a java program. If a well-written Java code exists with the name Mama.java, running the command: javac Mama.java will compile the java code and store it as Mama.class.

*****************************************************************************************************************************

Label:

*****************************************************************************************************************************

long:
	(keyword, data type)
long is one of eight data types in Java and it indicates a 64-bit signed integer. Values of type 'long' cannot contain a decimal point. The wrapper class for the type 'long' is Long.

*****************************************************************************************************************************

main:
	(keyword)

*****************************************************************************************************************************

Method:

*****************************************************************************************************************************

Method Overloading:

*****************************************************************************************************************************

native:
	(keyword)

*****************************************************************************************************************************

new:
	(keyword)
The keyword 'new' is used when creating an object of an existing class. It is also used when creating arrays.
	
	EXAMPLE
		String name = new String("Homer Simpson");
		Scanner in = new Scanner(System.in);
		Apples a = new Apples();

*****************************************************************************************************************************

null:

*****************************************************************************************************************************

Object:
	(keyword)

*****************************************************************************************************************************

package:
	(keyword)
A package is a collection of classes and other logically related definitions. Although optional, the package name should be declared in the first line of a class (before anything else).

	EXAMPLE
	package Examinations
	import java.util.*;
	public class Mathematics{
	
		}

*****************************************************************************************************************************

package-private:
	(Access-Modifier)
This is the default state of any field declared without a modifier. It means that field can be seen and accessed from any other class within the same package.

*****************************************************************************************************************************

Parameter:

*****************************************************************************************************************************
Polymorphism:

*****************************************************************************************************************************

print():
	(method)
The print() method is written as System.out.print() and it is used for displaying a set of characters on a command window. The print() method doesn't automatically generate a new line after printing out and that differentiates it from other standard output methods. The argument for the print() method is usually the variable or String to be printed out.

EXAMPLE
	(i)	System.out.print("Hello guys!");

	(ii)	int number = 4;
		System.out.print(number);

*****************************************************************************************************************************

printf():
	(method)
The printf() method is written as System.out.printf() and it is used for displaying a set of characters on a command window in a formatted way. The printf() method makes use of escape characters for formatting. These escape characters start with a backslash and a particular character. The printf() method takes two or more arguments; the first is a sequence of escape characters which define the format of the characters to be printed out. The arguments that follow represent the variables to be printed.

EXAMPLE
	String name = "Zinet";
	int age = 48;
	System.out.printf("%s is %d", name, age);

*****************************************************************************************************************************

private:
	(keyword, Access-modifier)
If a field is declared private, it means that field can be seen and accessed ONLY within its own class. Outside its class, it is totally invisible and inaccessible (even to subclasses).

*****************************************************************************************************************************

protected:
	(keyword, Access-modifier)
If a field is declared protected, it means that variable or method can be seen and accessed from its own class, its subclasses and any other class in the same package.

*****************************************************************************************************************************

println():
	(method)
The println() method is written as System.out.println() and it is used for displaying a set of characters on a command window. The println() method automatically generates a new line after printing out and that differentiates it from other standard output methods. The argument for the println() method is usually the variable or String to be printed out.

EXAMPLE
	(i)	System.out.println("Hello guys!");

	(ii)	int number = 4;
		System.out.println(number);

*****************************************************************************************************************************

public:
	(Access-modifier, keyword)
If a field is declared public, it means that field can be seen and accessed from any other class.

*****************************************************************************************************************************

return:
	(keyword)
The keyword 'return' is used to terminate a method and probably return (produce) a value. This returned value can be of any primitive or object reference type. All methods either return a value (primitive or reference) or void (nothing).

	Example
	public int add(int a, int b){
		int sum = a + b;
		return sum;
			}

*****************************************************************************************************************************

short:
	(keyword, data type)
short is one of eight data types in Java and it indicates a 16-bit whole number. Values of type 'short' cannot contain a decimal point. The wrapper class for the type 'short' is Short.

*****************************************************************************************************************************

static:
	(keyword, modifier)

*****************************************************************************************************************************

strictfp:
	(keyword)

*****************************************************************************************************************************

String:
	(keyword, data type)

*****************************************************************************************************************************

super:
	(keyword)
The keyword 'super' is used by subclasses to access methods declared in a superclass. The keyword is also used to invoke the constructor of a super class.

	EXAMPLE
	public int getAmount(){
		return super.getPayment();
		}

The method above indicates that the superclass contains a method called getPayment() and the value of that method is being accessed by the getAmount() method (in the subclass).

*****************************************************************************************************************************

switch:
	(keyword)
A switch statement is a selective statement that compares a parameter to numerous cases (options) and follows the first correct path. A case (option) is usually terminated by a 'break' keyword. In scenarios where this 'break' keyword is absent, execution overflows to other cases (options). A default statement can optionally be added after the case(s) and it is executed if none of the cases match the argument.

EXAMPLE

	int a = 2;
	switch(a){
		case 1:
			System.out.println("a is 1");
			break;
		case 2:
			System.out.println("a is 2");
			break;
		case 3:
			System.out.println("a is 3");
			break;
		default:
			System.out.println("a is not within the range");
			break;
		}//end of switch-case statement


If you run the code snippet above, "a is 2" will be displayed, this is of course because a is equal to 2. What the switch statement does is just compare the argument of the switch statement to each case (option) and look for an equation. If the break keyword wasn't there in case 2, execution will leak continiously until a break keyword is found. This would be printed out:
	a is 2
	a is 3

*****************************************************************************************************************************

synchronized:
	(keyword)

*****************************************************************************************************************************

System:
	(keyword, class)

*****************************************************************************************************************************

this:
	(keyword)
The keyword 'this' is basically a self-reference keyword. Any variable or method preceeded by the keyword 'this' belongs to the current object reference.

	EXAMPLE
	public class Complicated{
		String name;
		int age;
	public Complicated(String name, int age){
		this.name = name;
		this.age = age;
			}
		}

In the example above, "this.name" refers to the name variable that was declared as a global variable (property of the class).

*****************************************************************************************************************************

throw:
	(keyword)

*****************************************************************************************************************************

throws:
	(keyword)

*****************************************************************************************************************************

transient:
	(keyword)

*****************************************************************************************************************************

true:
	(keyword, boolean value)
true is one of the only two possible boolean values. Also, true could also indicate that a particular condition is met.

EXAMPLE
	boolean bool = ((2 + 2) == 4);

The variable bool above is true because 2 + 2 is 4.

*****************************************************************************************************************************

try:
	(keyword)
The keyword 'try' is used to start a try block. A try block encompasses any code that might throw an exception (cause a program to terminate). A try block must always be followed by a catch statement.

Example
	try{
		int a = 10;
		int b = 0;
		int quotient = a/b;
		}
	catch(ArithmeticException a){
		System.out.println("Cannot perform this operation");
		}



It is impossible to divide by zero in Java; therefore, ordinarily, the code above should flag an error. However, this has been taken care of by the try and catch block. It simply outputs 'Cannot perform this operation'. The try block therefore ensures continuity of a program.

*****************************************************************************************************************************

void:
	(keyword)
void is a keyword used to specify that a method doesn't return any value. By default, the main method always returns void.

	EXAMPLE
		public void incrementByOne(int a){
			a++;
			}

*****************************************************************************************************************************

volatile:
	(keyword)

*****************************************************************************************************************************

while
	(keyword)
A while loop repeats instructions over and over again as long as a particular condition is met. A while loop is often preceeded by the keyword 'while' followed by a condition (in parenthesis) and then a body of instruction(s); as long as the condition is met, the instructions will always be executed.
	
	Example:
		int x = 1;
		while(x >= 3){
			System.out.println("x is greater than or equal to 2");
			x++;
			}


If you run the example above, this would be displayed:

	x is greater than or equal to 2
	x is greater than or equal to 2
	x is greater than or equal to 2

	As long as the condition is met, the instructions of the while loop keeeps getting executed. It stops only when the condition returns false.
*****************************************************************************************************************************
